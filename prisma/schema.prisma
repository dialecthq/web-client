// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String @id @unique @default(uuid())
  email           String @unique
  username        String? @unique
  name            String?
  bio             String?
  image           String?
  pass            String?
  avatar          String?
  countryFrom     Int?
  countryLivingIn Int?
  languageKeys    Int[]
  languageLevels  Int[]
  tokens          Int @default(10)
  karma           Int @default(0)
  emailVerified   DateTime?
  notifications   Notification[] @relation("notifications")
  actions         Notification[] @relation("actions")
  followers       User[] @relation("followers")
  following       User[] @relation("followers")
  likedPosts      Post[] @relation("likes")
  posts           Post[]
  accounts        Account[]
  sessions        Session[]
}

model Post {
  id        String @id @default(uuid()) @unique
  type      String? @default("post")
  body      String
  authorId  String
  language  Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User @relation(fields: [authorId], references: [id])
  likes     User[] @relation("likes")
  replies   Post[] @relation("replies")
  replyTo   Post[] @relation("replies") 
}

model Notification {
  id              String @id @default(uuid()) @unique
  type            String
  notifyingUserId String
  actionAuthorId  String
  body            String?
  createdAt       DateTime @default(now())
  notifyingUser   User[] @relation("notifications")
  actionAuthor    User[] @relation("actions")
}
